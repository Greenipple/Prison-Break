Index: src/org/academiadecodigo/felinux/Position/MapPosition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.academiadecodigo.felinux.Position;\r\n\r\nimport org.academiadecodigo.felinux.Support.DirectionType;\r\nimport org.academiadecodigo.simplegraphics.graphics.Color;\r\nimport org.academiadecodigo.simplegraphics.graphics.Rectangle;\r\nimport org.academiadecodigo.simplegraphics.pictures.Picture;\r\n\r\npublic class MapPosition {\r\n\r\n        private int col;\r\n        private int row;\r\n        private Map map;\r\n        private Color color;\r\n        private java.lang.String source;\r\n        private DirectionType facing;\r\n        private Rectangle rectangle;\r\n        private Picture picture;\r\n\r\n        public MapPosition(int col, int row, Map map) {\r\n            this.col = col;\r\n            this.row = row;\r\n            this.map = map;\r\n            this.rectangle = new Rectangle(this.col * Map.CELL_SIZE + Map.PADDING, this.row * Map.CELL_SIZE + Map.PADDING, Map.CELL_SIZE, Map.CELL_SIZE);\r\n            //this.picture = new Picture(this.col * Map.CELL_SIZE + Map.PADDING, this.row * Map.CELL_SIZE + Map.PADDING, \"\");\r\n        }\r\n\r\n        public void moveInDirection(DirectionType direction, int distance) {\r\n\r\n            int previousCol = this.col;\r\n            int previousRow = this.row;\r\n\r\n            switch (direction) {\r\n\r\n                case UP:\r\n                    moveUp(distance);\r\n                    facing = DirectionType.UP;\r\n                    break;\r\n                case DOWN:\r\n                    moveDown(distance);\r\n                    facing = DirectionType.DOWN;\r\n                    break;\r\n                case LEFT:\r\n                    moveLeft(distance);\r\n                    facing = DirectionType.LEFT;\r\n                    break;\r\n                case RIGHT:\r\n                    moveRight(distance);\r\n                    facing = DirectionType.RIGHT;\r\n                    break;\r\n            }\r\n\r\n            int moveCol = (this.col - previousCol)*Map.CELL_SIZE;\r\n            int moveRow = (this.row - previousRow)*Map.CELL_SIZE;\r\n            this.rectangle.translate(moveCol,moveRow);\r\n            //this.picture.translate(moveCol,moveRow);\r\n        }\r\n\r\n        public boolean equals(MapPosition pos) {\r\n            return this.col == pos.getCol() && this.row == pos.getRow() ? true : false;\r\n        }\r\n        //movement is not allowed if block (blockArray) is not present in front.\r\n        public void moveUp(int distance) {\r\n            for (int i=0; i<distance; i++){\r\n                row--;\r\n            }\r\n\r\n        }\r\n\r\n        public void moveDown(int distance) {\r\n            for (int i = 0; i < distance; i++) {\r\n                row++;\r\n            }\r\n        }\r\n\r\n        public void moveLeft(int distance) {\r\n\r\n            for (int i = 0; i < distance; i++) {\r\n                col--;\r\n            }\r\n        }\r\n\r\n        public void moveRight(int distance) {\r\n\r\n            for (int i = 0; i < distance; i++) {\r\n                col++;\r\n            }\r\n        }\r\n\r\n        public Color getColor(){\r\n            return this.color;\r\n        }\r\n\r\n        public void setColor(Color color) {\r\n            this.color = color;\r\n        }\r\n        /*\r\n        public void setSource(java.lang.String source) {\r\n            this.picture.load(source);\r\n        }*/\r\n\r\n        public void setPosition(int col, int row) {\r\n            int previousCol = this.col;\r\n            int previousRow = this.row;\r\n\r\n            this.col = col;\r\n            this.row = row;\r\n\r\n            int moveCol = (this.col - previousCol)*Map.CELL_SIZE;\r\n            int moveRow = (this.row - previousRow)*Map.CELL_SIZE;\r\n            this.rectangle.translate(moveCol,moveRow);\r\n            //this.picture.translate(moveCol,moveRow);\r\n        }\r\n\r\n    public int getCol() {\r\n        return col;\r\n    }\r\n\r\n    public int getRow() {\r\n        return row;\r\n    }\r\n\r\n    public Rectangle getRectangle(){\r\n        return this.rectangle;\r\n    }\r\n\r\n    public void show() {\r\n            this.rectangle.setColor(this.color);\r\n            this.rectangle.fill();\r\n\r\n            //this.picture.load(this.source);\r\n            //this.picture.draw();\r\n    }\r\n\r\n    public void hide() {\r\n        this.rectangle.delete();\r\n        //this.picture.delete();\r\n    }\r\n\r\n    public DirectionType getFacing() {\r\n        return facing;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/org/academiadecodigo/felinux/Position/MapPosition.java	(revision aeb0775caae717100b171b3c2181f35033311e66)
+++ src/org/academiadecodigo/felinux/Position/MapPosition.java	(date 1593554273167)
@@ -36,6 +36,7 @@
                     facing = DirectionType.UP;
                     break;
                 case DOWN:
+
                     moveDown(distance);
                     facing = DirectionType.DOWN;
                     break;
@@ -73,7 +74,6 @@
         }
 
         public void moveLeft(int distance) {
-
             for (int i = 0; i < distance; i++) {
                 col--;
             }
